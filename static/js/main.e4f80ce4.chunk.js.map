{"version":3,"sources":["context.js","color-reducer.js","components/palette-color.js","components/icon-button.js","components/saved-palettes/palette-sample.js","components/saved-palettes/palette-list.js","components/main/main-color.jsx","components/main/main-palette.jsx","components/main/main-selection-buttons.jsx","components/main/main.jsx","components/history/history.js","App.js","serviceWorker.js","index.js"],"names":["ColorContext","React","createContext","colorList","savedPalettes","currentIndex","isMainPaletteOpen","firstLoad","forceNewColor","ColorReducer","state","action","type","payload","PaletteColor","props","PaletteSample","styled","div","color","darken","hue","r","parseInt","substring","g","b","IconButton","Wrapper","button","Icon","i","this","fontSize","onClick","disabled","className","Component","PaletteWrapper","PaletteContainer","useContext","dispatch","details","mainColor","palette","open","isPaletteOpen","togglePalette","map","p","id","OpenPalette","pColor","key","ClosedPalette","style","width","display","justifyContent","alignItems","marginRight","filter","ListContainer","MyLib","error","console","log","ColorDiv","rgba","MainColor","MainPalette","colors","node","useRef","ref","useEffect","document","addEventListener","toggleClose","removeEventListener","e","current","contains","target","newPalette","find","alert","ButtonsWrapper","span","RandomizeButton","MainSelector","randomizeColor","useCallback","a","async","Math","random","toString","slice","fetchPalette","paletteResult","rgbArrayToHexArray","result","newColor","uuidv4","length","data","model","input","fetch","method","referrerPolicy","body","JSON","stringify","response","json","arr","hexArr","forEach","rgb","hex","tmp","push","FlexWrapper","MainSection","Container","Column","ColorSample","History","c","index","indexOf","selectColor","App","initialState","useReducer","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4f80ce4.chunk.js","sourcesContent":["import React from 'react'\n\nconst ColorContext = React.createContext({\n    colorList: [ \n      // { \n      //   id: 0, \n      //   mainColor: \"#333eee\", \n      //   palette:[]\n      // }\n    ],\n    savedPalettes: [\n      // { \n      //   id: 0, \n      //   mainColor: \"#333eee\", \n      //   palette:[],\n      //   isPaletteOpen: false\n      // }\n    ],\n    currentIndex: 0,\n    isMainPaletteOpen: false,\n    firstLoad: true,\n    forceNewColor: false\n});\n\nexport default ColorContext","export default function ColorReducer(state, action)\n{\n    switch(action.type) {\n        case \"NEW_COLOR\":\n            return {\n                ...action.payload\n            }\n        case \"CHANGE_INDEX\":\n            return {\n                ...action.payload\n            }\n        case \"UPDATE_PALETTE_LIST\":\n            return {\n                ...action.payload\n            }\n        case \"TOGGLE_MAIN_PALETTE\":\n            return {\n                ...action.payload\n            }\n        case \"SAVE_PALETTE\":\n            return {\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}","import React from 'react'\nimport styled from 'styled-components'\n\nfunction PaletteColor(props) {\n    const PaletteSample = styled.div `\n    height: 40px;\n    width: 40px;\n    margin: 0.5%;\n    background-color: ${props.color};\n    border: 1.5px solid ${ () => {\n        const darken = (hue) => {\n            if (hue < 0) { hue = 0 }\n            return hue\n        }\n        const r = darken(parseInt(props.color.substring(1, 3), 16) - 20);\n        const g = darken(parseInt(props.color.substring(3, 5), 16) - 20);\n        const b = darken(parseInt(props.color.substring(5, 7), 16) - 20);\n        const rgba = `rgba(${r}, ${g}, ${b}, 0.2)`;\n        return rgba;\n    }};\n    border-radius: 12px;\n    transform: translateZ(0);\n    transition: transform 0.12s ease;\n    &:hover{\n        cursor: pointer;\n        transform: scale(1.08);\n        /* background-color: cadetblue; */\n    }\n    `\n    return (\n        <PaletteSample/>\n    )\n}\n\nexport default PaletteColor\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nexport class IconButton extends Component {\n    render() {\n        const Wrapper = styled.button `\n            background: none;\n            border: none;\n            outline: none;\n            text-align: center;\n            margin: 2%;\n            padding: 0!important;\n            display: flex;\n            align-items: center;\n            transition: transform 0.12s ease;\n            height: 100%;\n            &:hover {\n                cursor: pointer;\n                transform: scale(1.20);\n            }\n        `\n        const Icon = styled.i `\n            font-size: ${this.props.fontSize || \"28px\"};\n            height: 100%;\n            color: ${this.props.color};\n            /* border: 1px solid black; */\n            `\n            \n        return (\n            <Wrapper onClick={this.props.action} disabled={this.props.disabled}>\n                <Icon className={this.props.className}/>\n            </Wrapper>\n        )\n    }\n}\n\nexport default IconButton\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\n\nimport PaletteColor from '../palette-color'\nimport IconButton from '../icon-button'\n\nimport ColorContext from '../../context'\n\nconst PaletteWrapper = styled.div `\nmin-height: 54px;\nmin-width: 97%; /* 220px */\nmax-height: 7vh;\n/* max-width: 80%; */\n/* border: 1px solid blue; */\nborder-radius: 15px;\nmargin-bottom: 0.5vh;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n/* background-color: red; */\n`\n\nconst PaletteContainer = styled.div `\nheight: 90%;\nwidth: 98%;\ndisplay: flex;\nflex-direction: row;\njustify-content: space-between;\nalign-items: center;\n/* border-top: 1px solid rgba(0, 0, 0, 0.2); */\nborder-bottom: 1px solid rgba(0, 0, 0, 0.2);\nborder-radius: 10px;\n/* background-color: white; */\n`\n\nexport default function PaletteSample(props) {\n\n    var { state, dispatch } = useContext(ColorContext)\n    \n    const color = props.details.mainColor;\n    const palette = props.details.palette;\n    const open = props.details.isPaletteOpen\n\n    const togglePalette = () => {\n        // Dispatch toggle\n        var savedPalettes = [...state.savedPalettes].map(p => {\n            if (p.id === props.details.id) {\n               p.isPaletteOpen = !p.isPaletteOpen \n            }\n            return p\n        })\n\n        dispatch({\n            type: \"UPDATE_PALETTE_LIST\",\n            payload: {\n                ...state,\n                savedPalettes\n            }\n        })\n    }\n\n    const removePalette = () => {\n        var savedPalettes = [...state.savedPalettes].filter(p => (p.id !== props.details.id))\n\n        dispatch({\n            type: \"UPDATE_PALETTE_LIST\",\n            payload: {\n                ...state,\n                savedPalettes\n            }\n        })\n    }\n\n    const OpenPalette = (\n        <PaletteContainer>\n            {\n                palette.map(pColor => (<PaletteColor key={pColor} color = {pColor}/>))\n            }\n            <IconButton className=\"fas fa-angle-left\" fontSize=\"23px\" action={togglePalette} />\n        </PaletteContainer>\n    )\n    const ClosedPalette = (\n        <PaletteContainer>\n            <PaletteColor color={color}/>\n            <p style={{ fontSize:\"15px\" }}>{color}</p>\n            <span style={{\n                // border:\"1px solid blue\", \n                width:\"21%\", \n                display:\"flex\", \n                justifyContent:\"space-between\", \n                alignItems:\"center\", \n                marginRight:\"5px\"\n            }}>\n                <IconButton className=\"far fa-trash-alt\" action={removePalette} fontSize=\"16px\" color=\"#ee1169\"/>\n                <IconButton className=\"fas fa-angle-right\" fontSize=\"21px\" action={togglePalette} />\n            </span>\n        </PaletteContainer>\n    )\n\n    return (\n        <PaletteWrapper>\n            {open ? (OpenPalette) : (ClosedPalette)}\n        </PaletteWrapper>\n    )\n}\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\n\nimport PaletteSample from './palette-sample'\nimport ColorContext from '../../context'\n\nconst Wrapper = styled.div `\n    padding: 2vh 0 7vh 0;\n    width: 20%;\n    min-width: 260px;\n    display: flex;\n    flex-direction: column;\n    justify-content: stretch;\n    align-items: center;\n    /* border: 1px solid black; */\n`\nconst ListContainer = styled.div `\n    padding: 2vh 0 2vh 0;\n    min-width: 80%;\n    min-height: 20%;\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    overflow-y: auto;\n    /* background-color: lavender; */\n    `\n\nexport default function MyLib() {\n    const { state } = useContext(ColorContext)\n\n    var savedPalettes;\n    try { savedPalettes = state.savedPalettes }\n    catch (error) { console.log(error) }\n    \n    return (\n        <Wrapper>\n            <h2 className=\"title\">Saved List</h2>\n            <ListContainer >\n                {\n                    savedPalettes && savedPalettes.map(p => {\n                        return (\n                            <PaletteSample \n                                key={p.id}\n                                details={p} \n                            />\n                        )\n                    })\n                }\n            </ListContainer>\n        </Wrapper>\n    )\n}\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\n\nimport ColorContext from '../../context'\n\nconst ColorDiv = styled.div `\n    height: 300px;\n    width: 300px;\n    background-color: ${props => props.color};\n    border: 3px solid ${ props => {\n        var rgba;\n        const darken = (hue) => {\n            if (hue < 0) { hue = 0 }\n            return hue\n        }\n        if (props.color)\n        {\n            const r = darken(parseInt(props.color.substring(1, 3), 16) - 20);\n            const g = darken(parseInt(props.color.substring(3, 5), 16) - 20);\n            const b = darken(parseInt(props.color.substring(5, 7), 16) - 20);\n            rgba = `rgba(${r}, ${g}, ${b}, 0.2)`;\n        }\n        else { rgba = `white`}\n        return rgba;\n    }};\n    border-radius: 25%;\n    display: inline-block;\n`\n\nexport default function MainColor () {\n\n    var { state } = useContext(ColorContext)\n    \n    // The randomizeColor() function in ./main-selector.jsx is automatically executed \n    // the first time the component loads to initialize the first color. Once that\n    // executes, we have a color to pass to our components, hence the follwing try/catch.\n\n    var color;\n    try { color = state.colorList[state.currentIndex].mainColor } \n    catch { color = null }\n\n    return (\n        <ColorDiv color = {color}/>\n    )\n}","import React, { useEffect, useRef, useContext } from 'react'\nimport styled from 'styled-components'\nimport IconButton from '../icon-button'\nimport PaletteColor from '../palette-color'\n\nimport ColorContext from '../../context'\n\nconst PaletteWrapper = styled.div `\nwidth: 80%;\nheight: 55px;\nmargin: 5% auto 5% auto;\n\ndisplay: flex;\nalign-items: center;\n/* border: 1px solid black; */\n`\nconst PaletteContainer = styled.div `\nwidth: 100%;\nheight: 80%;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\nalign-items: center;\n`\n\nexport default function MainPalette() {\n    var { state, dispatch } = useContext(ColorContext)\n\n    var colors = [];\n    var mainColor = null\n    \n    try { \n        colors = state.colorList[state.currentIndex].palette;\n        mainColor = state.colorList[state.currentIndex].mainColor;\n    } \n    catch { colors = []; mainColor = null;}\n    \n    const open = state.isMainPaletteOpen\n\n    const node = useRef();\n    \n    const OpenPalette = (\n        <PaletteContainer ref={node}>\n        {\n            colors.map(color => (<PaletteColor key={color} color={color} />))\n        }\n        </PaletteContainer>\n    )\n\n    useEffect(() => {\n        // hide palette on click\n        document.addEventListener(\"mousedown\", toggleClose);\n        return () => {\n            document.removeEventListener(\"mousedown\", toggleClose);    \n        };\n    })\n\n    const toggleClose = e => {\n        // If click is on palette, then close\n        if (node.current && node.current.contains(e.target))\n        {\n            // setOpen(false); \n            dispatch({\n                type: \"TOGGLE_MAIN_PALETTE\",\n                payload: {\n                    ...state,\n                    isMainPaletteOpen: false\n                }\n            })\n        }\n    }\n\n    const toggleOpen = () => {\n        // setOpen(true)\n        dispatch({\n            type: \"TOGGLE_MAIN_PALETTE\",\n            payload: {\n                ...state,\n                isMainPaletteOpen: true\n            }\n        })\n    }\n\n    const savePalette = () => {\n        const newPalette = state.colorList[state.currentIndex];\n        const paletteExists = state.savedPalettes.find(p => (p.id === newPalette.id));\n        if (paletteExists)\n        {   // create a css animation to highlight palette in saved list\n            alert(`Palette with ${newPalette.mainColor} as main color is already in the list.`)\n        } else \n        {\n            \n            const palette = { \n                ...newPalette, \n                isPaletteOpen: false\n            }\n            \n            const savedPalettes = [...state.savedPalettes, palette]\n            \n            // Force new color is used as a flag to trigger randomizeColor() from the\n            // main/main-selection-buttons component.\n            dispatch({\n                type: \"SAVE_PALETTE\",\n                payload: {\n                    ...state,\n                    savedPalettes,\n                    forceNewColor: true\n                }\n            });\n        }\n\n        \n    }\n    \n    return (\n        <PaletteWrapper>\n         {\n            open ? (OpenPalette) : (\n                <PaletteContainer>\n                    <IconButton\n                        className=\"fas fa-angle-right\"\n                        action={toggleOpen}\n                    />\n                    <p>{mainColor}</p>\n                    <IconButton \n                        className=\"fas fa-plus-circle\" \n                        action={savePalette}\n                    />\n                </PaletteContainer>\n            )\n         }\n        </PaletteWrapper>\n    )\n}\n","import React, { useEffect, useContext, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport uuidv4 from \"uuid/v4\";\nimport fetch from \"node-fetch\";\n\nimport ColorContext from \"../../context\";\nimport IconButton from \"../icon-button\";\n\nconst ButtonsWrapper = styled.span`\n  width: 100%;\n  display: \"block\";\n  font-size: \"32px\";\n  /* border: 1px solid black; */\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst RandomizeButton = styled.button`\n  font-size: 18px;\n  border-radius: 25px;\n  padding: 15px;\n  outline: none;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nfunction MainSelector() {\n  const { state, dispatch } = useContext(ColorContext);\n\n  // Use callback is used in order to call the randomizeColor function when\n  // a state change triggers it, but to prevent it from continuously getting\n  // called in useEffect as a result.\n  const randomizeColor = useCallback(async () => {\n    // Generate random color\n    var mainColor = \"#\" + Math.random().toString(16).slice(2, 8);\n    var r = parseInt(mainColor.substring(1, 3), 16);\n    var g = parseInt(mainColor.substring(3, 5), 16);\n    var b = parseInt(mainColor.substring(5, 7), 16);\n\n    // useAPI to get palette based on main color\n    const paletteResult = await fetchPalette(r, g, b);\n    const palette = rgbArrayToHexArray(paletteResult.result);\n    mainColor = palette[0]; // colormind api slightly changes the input value\n\n    // This should be the standard state when generating a new color\n    const newColor = {\n      id: uuidv4(),\n      mainColor,\n      palette,\n    };\n    // Update color list\n    const colorList = [...state.colorList, newColor];\n    // Update current index location\n    const currentIndex = colorList.length - 1;\n    dispatch({\n      type: \"NEW_COLOR\",\n      payload: {\n        ...state,\n        colorList,\n        currentIndex,\n        firstLoad: false,\n        forceNewColor: false,\n      },\n    });\n  }, [state, dispatch]);\n\n  useEffect(() => {\n    state.firstLoad && randomizeColor();\n    state.forceNewColor && randomizeColor();\n    return () => {};\n  }, [state.firstLoad, state.forceNewColor, randomizeColor]);\n\n  const fetchPalette = async (r, g, b) => {\n    var url = \"https://colormind.io/api/\";\n    var data = {\n      model: \"default\",\n      input: [[r, g, b], \"N\", \"N\", \"N\", \"N\"],\n    };\n\n    const response = await fetch(url, {\n      method: \"POST\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    });\n\n    return response.json();\n  };\n\n  const rgbArrayToHexArray = (arr) => {\n    var hexArr = []\n    arr.forEach(rgb => {\n      var hex = \"#\";\n      rgb.forEach(hue => {\n        var tmp = hex + hue.toString(16);\n        \n        if(tmp.length % 2 === 0) { \n          // console.log(hue, hex, hex.length);\n          tmp = hex + \"0\" + hue.toString(16);\n          // console.log(\"new:\", tmp);\n        }\n\n        hex = tmp;\n\n      });\n      hexArr.push(hex)\n    });\n\n    return hexArr;\n  };\n\n  // const fetchList = async () => {\n  //   var url = \"http://colormind.io/list/\";\n  //   const response = await fetch(url);\n  //   return response.json();\n  // };\n\n  const nextColor = () => {\n    const currentIndex = state.currentIndex + 1;\n\n    dispatch({\n      type: \"CHANGE_INDEX\",\n      payload: {\n        ...state,\n        currentIndex,\n      },\n    });\n  };\n\n  const prevColor = () => {\n    const currentIndex = state.currentIndex - 1;\n    dispatch({\n      type: \"CHANGE_INDEX\",\n      payload: {\n        ...state,\n        currentIndex,\n      },\n    });\n  };\n\n  const nextCheck = () => {\n    if (state.currentIndex === state.colorList.length - 1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const prevCheck = () => {\n    if (state.currentIndex === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return (\n    <ButtonsWrapper>\n      <IconButton\n        className=\"fas fa-arrow-left\"\n        action={prevColor}\n        disabled={prevCheck()}\n      />\n      <RandomizeButton onClick={randomizeColor}>Random Color</RandomizeButton>\n      <IconButton\n        className=\"fas fa-arrow-right\"\n        action={nextColor}\n        disabled={nextCheck()}\n      />\n    </ButtonsWrapper>\n  );\n}\n\nexport default MainSelector;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport MainColor from './main-color';\nimport MainPalette from './main-palette';\nimport MainSelector from './main-selection-buttons';\n\n\nconst FlexWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    margin: auto;\n    padding: 2%;\n    text-align: center;\n    /* border: 2px solid blue; */\n`\n\nexport default function MainSection() {\n    return (\n        <FlexWrapper >\n            <h2 style={{ fontSize:\"38px\"}} className=\"title\">Main Color</h2>\n            <MainColor /> \n            <MainPalette />\n            <MainSelector />\n        </FlexWrapper>\n    )\n}\n\n\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\n\n// import ColorSample from './color-sample'\n\nimport ColorContext from \"../../context\";\n\nconst Wrapper = styled.div`\n  padding: 2vh 0 7vh 0;\n  min-width: 20%;\n  /* border-left: 1px solid orange; */\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst Container = styled.div`\n  width: 35%;\n  margin-right: 25px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  /* border: 1px solid purple; */\n`;\n\nconst Column = styled.div`\n  min-height: 26%;\n  /* margin-right: 0.5vw; */\n  display: flex;\n  flex-direction: column;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 10px;\n  overflow-y: auto;\n`;\nconst ColorSample = styled.div`\n  min-width: 35px;\n  min-height: 35px;\n  max-width: 2.4vw;\n  max-height: 2.4vw;\n  margin: 3px;\n  align-self: center;\n  background-color: ${(props) => props.color};\n  border-radius: 25%;\n  transition: transform 0.12s ease;\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.1);\n  }\n`;\n\nexport default function History() {\n  const { state, dispatch } = useContext(ColorContext);\n  const colors = state.colorList;\n\n  const selectColor = (index) => {\n    // Update currentIndex prop in context to udpate state.\n    dispatch({\n      type: \"CHANGE_INDEX\",\n      payload: {\n        ...state,\n        currentIndex: index,\n      },\n    });\n  };\n\n  return (\n    <Wrapper>\n      <Container>\n        <h2 className=\"title\">History</h2>\n        <Column>\n          {colors.map((c) => {\n            const index = colors.indexOf(c);\n            return (\n              <ColorSample\n                key={c.id}\n                color={c.mainColor}\n                onClick={() => selectColor(index)}\n              />\n            );\n          })}\n        </Column>\n      </Container>\n    </Wrapper>\n  );\n}\n","import React, { useContext, useReducer } from 'react';\nimport styled from 'styled-components';\n\nimport ColorContext from './context';\nimport ColorReducer from './color-reducer';\n\nimport MyLib from './components/saved-palettes/palette-list';\nimport Main from './components/main/main';\nimport History from './components/history/history';\n\nimport './App.css';\n\nconst App = () => {\n  const initialState = useContext(ColorContext);\n  const [state, dispatch] = useReducer(ColorReducer, initialState);\n\n  const App = styled.div `\n    height: 100vh;\n    display: flex;\n  `\n\n  return (\n    <ColorContext.Provider value={{state, dispatch}}>\n      <App className=\"App\">\n        <MyLib />\n        <Main />\n        <History />\n      </App>\n    </ColorContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}